{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to APTrust The Academic Preservation Trust (APTrust) is a distributed digital preservation repository committed to preserving the digital heritage of its depositors. APTrust services are open to sustaining members (who pay an annual fee directly to us) and to sub-accounts created by sustaining members. Before You Get Started Assuming you are already either a sustaining member, or have been added as a sub-account by a sustaining member, the process for getting started looks like this: You send the following information to help@aptrust.org : The name , email address , and phone number of a person at your organization who will act as your APTrust administrator. We prefer that you send a mobile number so you can use two-factor authentication. Your institution's domain name . (For example, virginia.edu.) We'll reply to your email with the following: Information on how to log in to your Pharos account. Pharos is our online registry, showing what you have deposited with APTrust and exposing the features you'll need to restore, delete, query, and audit your materials. A set of AWS credentials that you'll use to upload matierials to our system. First Steps Once your local administrator has access to Pharos, they can add new users and/or adminstrators for your institution. Pharos users have access to all features except: Adding and deactivtivating user accounts. Approving requests to delete materials from the repository. Pharos administrators can do both of the above. If you're new to APTrust, you will likely start out by using our demo system to fine-tune your ingest workflows. Once you are able to push materials successfully into the demo repository, you can begin using the production system.","title":"Home"},{"location":"#welcome-to-aptrust","text":"The Academic Preservation Trust (APTrust) is a distributed digital preservation repository committed to preserving the digital heritage of its depositors. APTrust services are open to sustaining members (who pay an annual fee directly to us) and to sub-accounts created by sustaining members.","title":"Welcome to APTrust"},{"location":"#before-you-get-started","text":"Assuming you are already either a sustaining member, or have been added as a sub-account by a sustaining member, the process for getting started looks like this: You send the following information to help@aptrust.org : The name , email address , and phone number of a person at your organization who will act as your APTrust administrator. We prefer that you send a mobile number so you can use two-factor authentication. Your institution's domain name . (For example, virginia.edu.) We'll reply to your email with the following: Information on how to log in to your Pharos account. Pharos is our online registry, showing what you have deposited with APTrust and exposing the features you'll need to restore, delete, query, and audit your materials. A set of AWS credentials that you'll use to upload matierials to our system.","title":"Before You Get Started"},{"location":"#first-steps","text":"Once your local administrator has access to Pharos, they can add new users and/or adminstrators for your institution. Pharos users have access to all features except: Adding and deactivtivating user accounts. Approving requests to delete materials from the repository. Pharos administrators can do both of the above. If you're new to APTrust, you will likely start out by using our demo system to fine-tune your ingest workflows. Once you are able to push materials successfully into the demo repository, you can begin using the production system.","title":"First Steps"},{"location":"contact_us/","text":"Contact APTrust For technical problems and help with your account, contact help@aptrust.org . To keep up with what's going on, join the APTrust community mailing list or drop in to one of our Slack channels: aptrust_community contains general information for all members bagging provides community support for bagging issues Want to report a bug or request a new feature? Open a Trello ticket, or write us at help@aptrust.org .","title":"Contact Us"},{"location":"contact_us/#contact-aptrust","text":"For technical problems and help with your account, contact help@aptrust.org . To keep up with what's going on, join the APTrust community mailing list or drop in to one of our Slack channels: aptrust_community contains general information for all members bagging provides community support for bagging issues Want to report a bug or request a new feature? Open a Trello ticket, or write us at help@aptrust.org .","title":"Contact APTrust"},{"location":"glossary/","text":"Core Concepts Before proceeding with this documentation, we'd like to clarify a few core concepts and essential terms. Generic File A single file or bitstream that makes up part of an intellectual object. For example, in a collection of jpeg photos that includes an XML metadata file, each jpeg and the XML file is a generic file. Intellectual Object A collection of generic files logically grouped into a single unit. An intellectual object typically consists of the payload files and tag files submitted in a bag. Pharos Pharos is the searchable online registry that keeps track of everything you've deposited in APTrust. It includes a web UI and a REST API that enable you to do the following: See what items you've deposited Search for items by object name, file name, and a number of other attributes View audit data (PREMIS events) for items you've deposited Request that objects and/or files be restored Request that objects and/or files be deleted (Does the REST API support this?) Query the status of ingest and restoration requests in progress Add and remove user accounts for your institution Pharos includes both a demo and production system. The demo system is for depositors to test new workflows and to get familiar with the system's general features. The production system is for long-term preservation. Pharos Demo URL : https://demo.aptrust.org Pharos Production URL : https://repo.aptrust.org API Keys and Separate Systems Once you have a valid Pharos login, you can generate your own API key to use the REST API. [Link when available...] Keep in mind that while your login email may be the same for both the demo and production Pharos systems, your API keys will be different. Receiving Bucket APTrust provides two receiving buckets for each depositor: one for the demo environment and one for the production environment. A receiving bucket is an Amazon AWS S3 bucket to which you upload materials for ingest into APTrust. Upload bags to your demo receiving bucket to ingest them into the demo system, and to the production bucket to ingest them into the production system. Receiving bucket names follow this pattern: Demo System : aptrust.receiving.test.<your-domain.xyx> Production System : aptrust.receiving.<your-domain.xyz> For example, if your domain name is example.org, your receiving buckets will be aptrust.receiving.test.example.or for demo and aptrust.receiving.example.org for production. Restoration Bucket When you ask for APTrust to restore an object, our system reassembles all of the object's files into a BagIt bag and copies it to your receiving bucket. (Individual files can be restored the same way, though they are not bagged.) The restoration process may take anywhere from a few seconds to several hours, depending on the amount of data restored and where it is stored. Once the restoration is complete, you can download the restore object or files from your restoration bucket. You Need AWS Access Keys to Use Your Buckets! You will need to get AWS credentials from APTrust to access your receiving and restoration buckets. APTrust sends them as part of the onboarding process when you first set up your account. If you need credentials, contact help@aptrust.org . DART DART is the Digital Archivist's Resource Tool. The initial release of DART 2.0 provides a drag-and-drop interface for bagging files and sending them to APTrust. DART is the easiest way to complete your first APTrust Deposit. To get started with DART, visit https://aptrust.github.io/dart-docs/users/getting_started/ .","title":"Glossary"},{"location":"glossary/#core-concepts","text":"Before proceeding with this documentation, we'd like to clarify a few core concepts and essential terms.","title":"Core Concepts"},{"location":"glossary/#generic-file","text":"A single file or bitstream that makes up part of an intellectual object. For example, in a collection of jpeg photos that includes an XML metadata file, each jpeg and the XML file is a generic file.","title":"Generic File"},{"location":"glossary/#intellectual-object","text":"A collection of generic files logically grouped into a single unit. An intellectual object typically consists of the payload files and tag files submitted in a bag.","title":"Intellectual Object"},{"location":"glossary/#pharos","text":"Pharos is the searchable online registry that keeps track of everything you've deposited in APTrust. It includes a web UI and a REST API that enable you to do the following: See what items you've deposited Search for items by object name, file name, and a number of other attributes View audit data (PREMIS events) for items you've deposited Request that objects and/or files be restored Request that objects and/or files be deleted (Does the REST API support this?) Query the status of ingest and restoration requests in progress Add and remove user accounts for your institution Pharos includes both a demo and production system. The demo system is for depositors to test new workflows and to get familiar with the system's general features. The production system is for long-term preservation. Pharos Demo URL : https://demo.aptrust.org Pharos Production URL : https://repo.aptrust.org API Keys and Separate Systems Once you have a valid Pharos login, you can generate your own API key to use the REST API. [Link when available...] Keep in mind that while your login email may be the same for both the demo and production Pharos systems, your API keys will be different.","title":"Pharos"},{"location":"glossary/#receiving-bucket","text":"APTrust provides two receiving buckets for each depositor: one for the demo environment and one for the production environment. A receiving bucket is an Amazon AWS S3 bucket to which you upload materials for ingest into APTrust. Upload bags to your demo receiving bucket to ingest them into the demo system, and to the production bucket to ingest them into the production system. Receiving bucket names follow this pattern: Demo System : aptrust.receiving.test.<your-domain.xyx> Production System : aptrust.receiving.<your-domain.xyz> For example, if your domain name is example.org, your receiving buckets will be aptrust.receiving.test.example.or for demo and aptrust.receiving.example.org for production.","title":"Receiving Bucket"},{"location":"glossary/#restoration-bucket","text":"When you ask for APTrust to restore an object, our system reassembles all of the object's files into a BagIt bag and copies it to your receiving bucket. (Individual files can be restored the same way, though they are not bagged.) The restoration process may take anywhere from a few seconds to several hours, depending on the amount of data restored and where it is stored. Once the restoration is complete, you can download the restore object or files from your restoration bucket. You Need AWS Access Keys to Use Your Buckets! You will need to get AWS credentials from APTrust to access your receiving and restoration buckets. APTrust sends them as part of the onboarding process when you first set up your account. If you need credentials, contact help@aptrust.org .","title":"Restoration Bucket"},{"location":"glossary/#dart","text":"DART is the Digital Archivist's Resource Tool. The initial release of DART 2.0 provides a drag-and-drop interface for bagging files and sending them to APTrust. DART is the easiest way to complete your first APTrust Deposit. To get started with DART, visit https://aptrust.github.io/dart-docs/users/getting_started/ .","title":"DART"},{"location":"partner_tools/","text":"Partner Tools Command line tools for Mac, Linux, and Windows are available through the links below: OSX 64-bit, v 2.1 Linux 64-bit, v 2.1 Windows 64-bit, v 2.1 Each of these tools returns specific exit codes, so you can integrate them into your scripts. You can view any program's built-in documentation by passing the --help flag. List of Partner Tools In addition to our graphical tool for bagging and uploading, DART , APTrust also distributes a suite of command-line tools. These tools use less memory and generally less CPU than DART. They include: Tool Description apt_check_ingest Queries Pharos to check the ingest status of a bag. This requires a Pharos API key. See the configuration section below. apt_validate Validates bags (tarred or untarred) before uploading them for ingest or after downloading them from the restoration bucket. apt_upload Uploads bags to your receiving buckets for ingest. Requires AWS keys be present in your config file. See below. apt_list Lists the contents of your receiving and restoration buckets. Requires AWS keys. apt_download Downloads restored bags from your restoration buckets. Requires AWS keys. apt_delete Deletes restored bags from your restoration buckets. Requires AWS keys. Configuration File All of the tools except apt_validate require a simple config file with five name-value pairs. Note that quotes are optional, and comment lines begin with a hash mark. # Config for apt_upload and apt_download AwsAccessKeyId = 123456789XYZ AwsSecretAccessKey = THIS KEY INCLUDES SPACES AND DOES NOT NEED QUOTES ReceivingBucket = 'aptrust.receiving.universityname.edu' RestorationBucket = \"aptrust.restore.universityname.edu\" DownloadDir = \"/home/josie/downloads\" AptrustApiUser = \"archivist@example.edu\" AptrustApiKey = \"f887afc5e1624eda92ae1a5aecdf210c\" If you prefer not to put your AWS keys in the config file, you can put them into environment variables called AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY . The config file should include the following variables: ReceivingBucket : The name of the S3 bucket that will hold your uploaded APTrust bags that are awaiting ingest. E.g. aptrust.receiving.college.edu . RestorationBucket : The name of the S3 bucket that will hold your restored APTrust bags. E.g. aptrust.restore.college.edu . DownloadDir : The local directory in which to save files downloaded from your APTrust restoration bucket. The APTrust config currently does not expand ~ to your home directory, so use an absolute path to be safe. AptrustApiUser : The email address for logging in to APTrust's Pharos REST API. AptrustApiKey : Your API key for the Pharos REST API. This key must match the user email. (That is, joe@example.com cannot log in with a key that was issued to beth@example.com .) If you save your config file as ~/.aptrust_partner.conf in Linux/Mac or as %HOMEPATH%\\.aptrust_partner.conf under Windows, you will not have to specify a --config option when you run the tools. Otherwise, run the tools with the --config file pointing to the full path of your configuration file. Below is a screenshot of apt_list showing the contents of an AWS receiving bucket. apt_check_ingest shows the ingest status of items that match a specified file name.","title":"Partner Tools"},{"location":"partner_tools/#partner-tools","text":"Command line tools for Mac, Linux, and Windows are available through the links below: OSX 64-bit, v 2.1 Linux 64-bit, v 2.1 Windows 64-bit, v 2.1 Each of these tools returns specific exit codes, so you can integrate them into your scripts. You can view any program's built-in documentation by passing the --help flag.","title":"Partner Tools"},{"location":"partner_tools/#list-of-partner-tools","text":"In addition to our graphical tool for bagging and uploading, DART , APTrust also distributes a suite of command-line tools. These tools use less memory and generally less CPU than DART. They include: Tool Description apt_check_ingest Queries Pharos to check the ingest status of a bag. This requires a Pharos API key. See the configuration section below. apt_validate Validates bags (tarred or untarred) before uploading them for ingest or after downloading them from the restoration bucket. apt_upload Uploads bags to your receiving buckets for ingest. Requires AWS keys be present in your config file. See below. apt_list Lists the contents of your receiving and restoration buckets. Requires AWS keys. apt_download Downloads restored bags from your restoration buckets. Requires AWS keys. apt_delete Deletes restored bags from your restoration buckets. Requires AWS keys.","title":"List of Partner Tools"},{"location":"partner_tools/#configuration-file","text":"All of the tools except apt_validate require a simple config file with five name-value pairs. Note that quotes are optional, and comment lines begin with a hash mark. # Config for apt_upload and apt_download AwsAccessKeyId = 123456789XYZ AwsSecretAccessKey = THIS KEY INCLUDES SPACES AND DOES NOT NEED QUOTES ReceivingBucket = 'aptrust.receiving.universityname.edu' RestorationBucket = \"aptrust.restore.universityname.edu\" DownloadDir = \"/home/josie/downloads\" AptrustApiUser = \"archivist@example.edu\" AptrustApiKey = \"f887afc5e1624eda92ae1a5aecdf210c\" If you prefer not to put your AWS keys in the config file, you can put them into environment variables called AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY . The config file should include the following variables: ReceivingBucket : The name of the S3 bucket that will hold your uploaded APTrust bags that are awaiting ingest. E.g. aptrust.receiving.college.edu . RestorationBucket : The name of the S3 bucket that will hold your restored APTrust bags. E.g. aptrust.restore.college.edu . DownloadDir : The local directory in which to save files downloaded from your APTrust restoration bucket. The APTrust config currently does not expand ~ to your home directory, so use an absolute path to be safe. AptrustApiUser : The email address for logging in to APTrust's Pharos REST API. AptrustApiKey : Your API key for the Pharos REST API. This key must match the user email. (That is, joe@example.com cannot log in with a key that was issued to beth@example.com .) If you save your config file as ~/.aptrust_partner.conf in Linux/Mac or as %HOMEPATH%\\.aptrust_partner.conf under Windows, you will not have to specify a --config option when you run the tools. Otherwise, run the tools with the --config file pointing to the full path of your configuration file. Below is a screenshot of apt_list showing the contents of an AWS receiving bucket. apt_check_ingest shows the ingest status of items that match a specified file name.","title":"Configuration File"},{"location":"quick_start/","text":"Quick Start Logging In You can log in to Pharos, APTrust's online registry, at the URLs below: Staging Repository - https://staging.aptrust.org Staging is for very new, potentially unstable features. Staging is currently the only system that accepts Beyond the Repository (BTR) formatted bags. Staging does not preserve anything for more than 7 days. Test/Demo Repository - https://demo.aptrust.org Demo is for you to test your bagging process and for APTrust to test new features that are considered stable. Demo does not guarantee preservation of anything beyond a few days. Production Repository - https://repo.aptrust.org Production is for materials you want to preserve for the long term. Adding Users See the User Management page for info on how to add users to your institution's Pharos account. Making Your First Deposit We suggest you make your first deposits in the demo repository , so you can test out your workflows and get a feel for how Pharos works. Depositing with DART The easiest way to make your first APTrust deposit is to use DART, which enables drag-and-drop deposits. DART runs on Windows, Mac, and Linux. To install DART and run your first ingest job, see the DART user guide . DART allows you to test test out different bagging and uploading options through a simple point-and-click interface. Once you find the combination that works for you, you can save it as a Workflow , and then you can run that workflow from within DART, or from the command line. You can also incorporate DART's command-line workflows into larger scripted workflows using languages like Ruby, Python, PHP, JavaScript or even bash shell scripts. Exporting from Fedora If your local repository uses Fedora, you can export APTrust-compliant bags directly from Fedora and then upload them to your receiving bucket for ingest. After Fedora produces the bag, you can use APTrust apt_upload tool to upload the bag to your receiving bucket. From there, APTrust ingest services will pick it up for processing, and you can track its progress in the Pharos Work Items list. Custom Bagging If you want to bag materials yourself, be sure your bags conform to the APTrust bagging requirements . After bagging, you can use APTrust's apt_upload tool or other publicly available tools such as the MinIO client to upload your bag.","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"quick_start/#logging-in","text":"You can log in to Pharos, APTrust's online registry, at the URLs below: Staging Repository - https://staging.aptrust.org Staging is for very new, potentially unstable features. Staging is currently the only system that accepts Beyond the Repository (BTR) formatted bags. Staging does not preserve anything for more than 7 days. Test/Demo Repository - https://demo.aptrust.org Demo is for you to test your bagging process and for APTrust to test new features that are considered stable. Demo does not guarantee preservation of anything beyond a few days. Production Repository - https://repo.aptrust.org Production is for materials you want to preserve for the long term.","title":"Logging In"},{"location":"quick_start/#adding-users","text":"See the User Management page for info on how to add users to your institution's Pharos account.","title":"Adding Users"},{"location":"quick_start/#making-your-first-deposit","text":"We suggest you make your first deposits in the demo repository , so you can test out your workflows and get a feel for how Pharos works.","title":"Making Your First Deposit"},{"location":"quick_start/#depositing-with-dart","text":"The easiest way to make your first APTrust deposit is to use DART, which enables drag-and-drop deposits. DART runs on Windows, Mac, and Linux. To install DART and run your first ingest job, see the DART user guide . DART allows you to test test out different bagging and uploading options through a simple point-and-click interface. Once you find the combination that works for you, you can save it as a Workflow , and then you can run that workflow from within DART, or from the command line. You can also incorporate DART's command-line workflows into larger scripted workflows using languages like Ruby, Python, PHP, JavaScript or even bash shell scripts.","title":"Depositing with DART"},{"location":"quick_start/#exporting-from-fedora","text":"If your local repository uses Fedora, you can export APTrust-compliant bags directly from Fedora and then upload them to your receiving bucket for ingest. After Fedora produces the bag, you can use APTrust apt_upload tool to upload the bag to your receiving bucket. From there, APTrust ingest services will pick it up for processing, and you can track its progress in the Pharos Work Items list.","title":"Exporting from Fedora"},{"location":"quick_start/#custom-bagging","text":"If you want to bag materials yourself, be sure your bags conform to the APTrust bagging requirements . After bagging, you can use APTrust's apt_upload tool or other publicly available tools such as the MinIO client to upload your bag.","title":"Custom Bagging"},{"location":"bagging/","text":"APTrust Bagging Requirements APTrust currently accepts bags for ingest in the APTrust BagIt format. In 2020, APTrust will begin accepting bags in Beyond the Repository (BTR) format as well, but we suggest APTrust members stick to the APTrust format. APTrust BagIt Specification In addition to conforming to the BagIt specification version 0.97 or version 1.0 , valid APTrust bags must include the tag files and tags listed below, and must meet the following criteria: Bags must be serialized in tar format. Tarred bags must untar to a single directory whose name matches the name of the tar file. For example, my_bag.tar must untar to a directory called my_bag . The name of the tarred bag file must not include directories. my.edu.my_bag.tar is valid. C:\\path\\to\\my.edu.my_bag.tar is not. Bags must contain either an md5 or sha256 manifest, or both Bags must be 5 terabytes or less in size. Bags may not contain a fetch.txt file. Bags may contain tag manifests. Bags may contain files outside of the data directory other than manifests and tag manifests. APTrust will consider these to be tag files, and will not try to parse them. When uploading multipart bags, use the multipart bag naming format described below. A valid untarred APTrust bag has the following structure: <base directory>/ | aptrust-info.txt | bag-info.txt | bagit.txt | manifest-&lt;algorithm&gt;.txt (md5 AND/OR sha256) | [optional tag manifests] | [optional additional tag files] \\--- data/ | [payload files] \\--- [optional tag directories]/ | [optional tag files] File and Directory Names File and Folder names must follow POSIX conventions: Contain upper or lower case letters, numbers, dots, underscores, percent signs, or dashes. (A\u2013Z a\u2013z 0\u20139 . _% -) May contain virtually any printable character, except newlines, carriage returns, tabs, vertical tabs and ASCII bells. (As of 1/30/2017) Are considered case sensitive. MUST not begin with a dash. (-) MUST not contain whitespaces May contain whitespaces. (As of 1/30/2017) Restricted to 255 characters in length including extension. MUST be at least 1 character in length. bagit.txt file The bag must have a bagit.txt file, with the following tags. Tag Allowed values BagIt-Version 0.97 or 1.0 BagIt-Version UTF-8 bag-info.txt file The bag-info.txt file should contain the following tags: Tag Description Example Source-Organization This should be the human readable name of the APTrust partner organization. For example, \"University of Virginia.\" You may be more specific, if you wish, specifying a specific college or library within the university, such as \"Georgetown University Law Library.\" However, when APTrust restores bags, the source organization in the bag-info.txt file will be set to the name of the partner institution. University of Virginia Bagging-Date The date the content was bagged. Use ISO 8601 UTC format (YYYY-MM-DD). 2019-08-19 Bag-Count Two numbers separated by \"of\", in particular, \"N of T\", where T is the total number of bags in a group of bags and N is the ordinal number within the group; if T is not known, specify it as \"?\" (question mark). Examples: 1 of 2, 4 of 4, 3 of ?, 89 of 145. Internal-Sender-Description A sender-local explanation of the contents and provenance. Internal-Sender-Identifier An alternate sender-specific identifier for the content and/or bag. Bag-Group-Identifier A sender-supplied identifier for the set, if any, of bags to which it logically belongs. Greeling Photo Collection For more on bag group identifiers, see the Bag Group Identifiers section of the Objects page. For a list of other commonly-used tags in the bag-info.txt file, see the official BagIt specification for version 0.97 or version 1.0 . APTrust supports all of the tags mentioned in the 0.97 and 1.0 specifications. You may also add your own custom tags to this file. aptrust-info.txt file This file must contain the following tags: Tag Description Title A human readable title for searching and listing in APTrust. This cannot be empty. Description A human-readable description of the bag. This will appear in Pharos. Access One of three access options listed below. The access option describes who can see an object's metadata, including its name and description, a list of its generic files and events. APTrust does not currently provide access to the objects themselves, except when you restore one of your bags. No matter which access option you choose, no other institution can access your intellectual object. Storage-Option This indicates how and where you want APTrust to store your bag. If omitted, Storage-Option defaults to \"Standard\". See the section on Storage Options below for more information. Allowed Access Values Restricted : Metadata about this object is accessible to the institutional administrator (at the depositing institution) and to the APTrust admin. No one else can even see that this object exists in the repository. Institution : All users at the depositing institution can see metadata about this object. Consortia : All APTrust members can see this object's metadata. Allowed Storage-Option Values Standard : The bag's contents will be store in S3 in Northern Virginia and Glacier in Oregon. APTrust will perform fixity checks on the S3 files every 90 days. Glacier-OH : Files will be stored ONLY in Glacier, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-OR : Files will be stored ONLY in Glacier, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-VA : Files will be stored ONLY in Glacier, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OH : Files will be stored ONLY in Glacier Deep Archive, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OR : Files will be stored ONLY in Glacier Deep Archive, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-VA : Files will be stored ONLY in Glacier Deep Archive, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. A note on storage options When you update an existing bag, APTrust will apply Storage-Option of the original version to the new version, even if the new version's Storage-Option tag explicitly specifies something different. This is to prevent the proliferation of multiple different versions of an object across multiple storage areas. If you want to change the Storage-Option of an existing object, you must delete it and then re-ingest it with the new option. Multipart bags You may split a single large bag into a number of smaller bags by using the naming convention institution_identifier.bag_identifier.b###.of### . That is, you append .bag01.of16 , .bag02.of16 , etc. to the end of the bag name of each bag in the group. Upon ingest, APTrust will treat all of the contents of all of the bags as part of a single intellectual object. Thus, the contents of test.edu/photos.bag01.of03.tar , test.edu/photos.bag02.of03.tar , and test.edu/photos.bag03.of03.tar would all be collected into a single intellectual object called test.edu/photos . Because APTrust re-bags files for restoration, the bags returned by a restoration request will not match the bags you originally submitted, but all of the payload files will be present. Generic Files in APTrust are referenced by their URI, which is the original filepath relative to the bag. File and folder names should be unique across multi-part bags to make sure all items are processed and not treated as a file update. Versioning APTrust does not currently support versioning. When you upload new versions of existing files, APTrust overwrites the old version with the new. See Updates for details. If you want to keep multiple versions of a bag or file, append a version number or timestamp to the end of the bag or file name. For example, test.edu/bag_of_photos and test.edu/bag_of_photos.v2 will be stored as separate objects, and files from the second version will not overwrite files from the first. BTR BagIt Profile The BTR bagit profile is not yet finalized, though it's getting close. We will update this section when the BTR format is final.","title":"APTrust Bagging Requirements"},{"location":"bagging/#aptrust-bagging-requirements","text":"APTrust currently accepts bags for ingest in the APTrust BagIt format. In 2020, APTrust will begin accepting bags in Beyond the Repository (BTR) format as well, but we suggest APTrust members stick to the APTrust format.","title":"APTrust Bagging Requirements"},{"location":"bagging/#aptrust-bagit-specification","text":"In addition to conforming to the BagIt specification version 0.97 or version 1.0 , valid APTrust bags must include the tag files and tags listed below, and must meet the following criteria: Bags must be serialized in tar format. Tarred bags must untar to a single directory whose name matches the name of the tar file. For example, my_bag.tar must untar to a directory called my_bag . The name of the tarred bag file must not include directories. my.edu.my_bag.tar is valid. C:\\path\\to\\my.edu.my_bag.tar is not. Bags must contain either an md5 or sha256 manifest, or both Bags must be 5 terabytes or less in size. Bags may not contain a fetch.txt file. Bags may contain tag manifests. Bags may contain files outside of the data directory other than manifests and tag manifests. APTrust will consider these to be tag files, and will not try to parse them. When uploading multipart bags, use the multipart bag naming format described below. A valid untarred APTrust bag has the following structure: <base directory>/ | aptrust-info.txt | bag-info.txt | bagit.txt | manifest-&lt;algorithm&gt;.txt (md5 AND/OR sha256) | [optional tag manifests] | [optional additional tag files] \\--- data/ | [payload files] \\--- [optional tag directories]/ | [optional tag files]","title":"APTrust BagIt Specification"},{"location":"bagging/#file-and-directory-names","text":"File and Folder names must follow POSIX conventions: Contain upper or lower case letters, numbers, dots, underscores, percent signs, or dashes. (A\u2013Z a\u2013z 0\u20139 . _% -) May contain virtually any printable character, except newlines, carriage returns, tabs, vertical tabs and ASCII bells. (As of 1/30/2017) Are considered case sensitive. MUST not begin with a dash. (-) MUST not contain whitespaces May contain whitespaces. (As of 1/30/2017) Restricted to 255 characters in length including extension. MUST be at least 1 character in length.","title":"File and Directory Names"},{"location":"bagging/#bagittxt-file","text":"The bag must have a bagit.txt file, with the following tags. Tag Allowed values BagIt-Version 0.97 or 1.0 BagIt-Version UTF-8","title":"bagit.txt file"},{"location":"bagging/#bag-infotxt-file","text":"The bag-info.txt file should contain the following tags: Tag Description Example Source-Organization This should be the human readable name of the APTrust partner organization. For example, \"University of Virginia.\" You may be more specific, if you wish, specifying a specific college or library within the university, such as \"Georgetown University Law Library.\" However, when APTrust restores bags, the source organization in the bag-info.txt file will be set to the name of the partner institution. University of Virginia Bagging-Date The date the content was bagged. Use ISO 8601 UTC format (YYYY-MM-DD). 2019-08-19 Bag-Count Two numbers separated by \"of\", in particular, \"N of T\", where T is the total number of bags in a group of bags and N is the ordinal number within the group; if T is not known, specify it as \"?\" (question mark). Examples: 1 of 2, 4 of 4, 3 of ?, 89 of 145. Internal-Sender-Description A sender-local explanation of the contents and provenance. Internal-Sender-Identifier An alternate sender-specific identifier for the content and/or bag. Bag-Group-Identifier A sender-supplied identifier for the set, if any, of bags to which it logically belongs. Greeling Photo Collection For more on bag group identifiers, see the Bag Group Identifiers section of the Objects page. For a list of other commonly-used tags in the bag-info.txt file, see the official BagIt specification for version 0.97 or version 1.0 . APTrust supports all of the tags mentioned in the 0.97 and 1.0 specifications. You may also add your own custom tags to this file.","title":"bag-info.txt file"},{"location":"bagging/#aptrust-infotxt-file","text":"This file must contain the following tags: Tag Description Title A human readable title for searching and listing in APTrust. This cannot be empty. Description A human-readable description of the bag. This will appear in Pharos. Access One of three access options listed below. The access option describes who can see an object's metadata, including its name and description, a list of its generic files and events. APTrust does not currently provide access to the objects themselves, except when you restore one of your bags. No matter which access option you choose, no other institution can access your intellectual object. Storage-Option This indicates how and where you want APTrust to store your bag. If omitted, Storage-Option defaults to \"Standard\". See the section on Storage Options below for more information.","title":"aptrust-info.txt file"},{"location":"bagging/#allowed-access-values","text":"Restricted : Metadata about this object is accessible to the institutional administrator (at the depositing institution) and to the APTrust admin. No one else can even see that this object exists in the repository. Institution : All users at the depositing institution can see metadata about this object. Consortia : All APTrust members can see this object's metadata.","title":"Allowed Access Values"},{"location":"bagging/#allowed-storage-option-values","text":"Standard : The bag's contents will be store in S3 in Northern Virginia and Glacier in Oregon. APTrust will perform fixity checks on the S3 files every 90 days. Glacier-OH : Files will be stored ONLY in Glacier, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-OR : Files will be stored ONLY in Glacier, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-VA : Files will be stored ONLY in Glacier, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OH : Files will be stored ONLY in Glacier Deep Archive, in AWS's Ohio region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-OR : Files will be stored ONLY in Glacier Deep Archive, in AWS's Oregon region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. Glacier-Deep-VA : Files will be stored ONLY in Glacier Deep Archive, in AWS's Northern Virginia region, and will be encrypted during storage. APTrust will not perform any fixity checks on these files. A note on storage options When you update an existing bag, APTrust will apply Storage-Option of the original version to the new version, even if the new version's Storage-Option tag explicitly specifies something different. This is to prevent the proliferation of multiple different versions of an object across multiple storage areas. If you want to change the Storage-Option of an existing object, you must delete it and then re-ingest it with the new option.","title":"Allowed Storage-Option Values"},{"location":"bagging/#multipart-bags","text":"You may split a single large bag into a number of smaller bags by using the naming convention institution_identifier.bag_identifier.b###.of### . That is, you append .bag01.of16 , .bag02.of16 , etc. to the end of the bag name of each bag in the group. Upon ingest, APTrust will treat all of the contents of all of the bags as part of a single intellectual object. Thus, the contents of test.edu/photos.bag01.of03.tar , test.edu/photos.bag02.of03.tar , and test.edu/photos.bag03.of03.tar would all be collected into a single intellectual object called test.edu/photos . Because APTrust re-bags files for restoration, the bags returned by a restoration request will not match the bags you originally submitted, but all of the payload files will be present. Generic Files in APTrust are referenced by their URI, which is the original filepath relative to the bag. File and folder names should be unique across multi-part bags to make sure all items are processed and not treated as a file update.","title":"Multipart bags"},{"location":"bagging/#versioning","text":"APTrust does not currently support versioning. When you upload new versions of existing files, APTrust overwrites the old version with the new. See Updates for details. If you want to keep multiple versions of a bag or file, append a version number or timestamp to the end of the bag or file name. For example, test.edu/bag_of_photos and test.edu/bag_of_photos.v2 will be stored as separate objects, and files from the second version will not overwrite files from the first.","title":"Versioning"},{"location":"bagging/#btr-bagit-profile","text":"The BTR bagit profile is not yet finalized, though it's getting close. We will update this section when the BTR format is final.","title":"BTR BagIt Profile"},{"location":"bagging/tools/","text":"Bagging Tools DART DART provides both a graphical UI and a command-line interface for building bags and uploading them to APTrust. If you're in a hurry, DART is the best way to get started. If you want to build an APTrust ingest workflow through a point-and-click interface and later incorporate that workflow into a set of scripted tasks, DART is also a good choice, as it supports both graphical and comman-line use. Partner Tools While our suite of command-line tools does not include a bagger, it does include apt_validate to help you validate tarred or untarred bags before uploading them for ingest. See our Partner Tools page for more info. Python BagIt If you want to roll your own bagger, try the Library of Congress's bagit.py module, or create a variation of the work already started by the University of Miami or North Carolina State University. BagIt Python Miami's APTrust-specific bagit scripts NCSU's APTrust-specific bagit scripts","title":"Bagging Tools"},{"location":"bagging/tools/#bagging-tools","text":"","title":"Bagging Tools"},{"location":"bagging/tools/#dart","text":"DART provides both a graphical UI and a command-line interface for building bags and uploading them to APTrust. If you're in a hurry, DART is the best way to get started. If you want to build an APTrust ingest workflow through a point-and-click interface and later incorporate that workflow into a set of scripted tasks, DART is also a good choice, as it supports both graphical and comman-line use.","title":"DART"},{"location":"bagging/tools/#partner-tools","text":"While our suite of command-line tools does not include a bagger, it does include apt_validate to help you validate tarred or untarred bags before uploading them for ingest. See our Partner Tools page for more info.","title":"Partner Tools"},{"location":"bagging/tools/#python-bagit","text":"If you want to roll your own bagger, try the Library of Congress's bagit.py module, or create a variation of the work already started by the University of Miami or North Carolina State University. BagIt Python Miami's APTrust-specific bagit scripts NCSU's APTrust-specific bagit scripts","title":"Python BagIt"},{"location":"pharos/","text":"Using Pharos Logging In If you don't already have a Pharos account, contact the APTrust administrator at your organization to set one up. If your organization does not yet have an account, contact help@aptrust.org to get set up. Once you have an account, log in with your email address to either the demo system or the production system. Demo: https://demo.aptrust.org Production: https://repo.aptrust.org You'll be asked to change your password the first time you log in. Depending on your organization's security settings, you may also be asked to activate two-factor authentication. For more on that, see Two Factor Authentication . Note that because the demo and production systems are separate, you will have to reset your password on each system the first time you log in. You can have different passwords and different two-factor authentication settings for each system. Forgot Your Password? If you forget your password, go to the appropriate login page above (Demo or Production) and click the Forgot your password? link next to the Sign In button. The system will email you instructions on how to proceed.","title":"Using Pharos"},{"location":"pharos/#using-pharos","text":"","title":"Using Pharos"},{"location":"pharos/#logging-in","text":"If you don't already have a Pharos account, contact the APTrust administrator at your organization to set one up. If your organization does not yet have an account, contact help@aptrust.org to get set up. Once you have an account, log in with your email address to either the demo system or the production system. Demo: https://demo.aptrust.org Production: https://repo.aptrust.org You'll be asked to change your password the first time you log in. Depending on your organization's security settings, you may also be asked to activate two-factor authentication. For more on that, see Two Factor Authentication . Note that because the demo and production systems are separate, you will have to reset your password on each system the first time you log in. You can have different passwords and different two-factor authentication settings for each system.","title":"Logging In"},{"location":"pharos/#forgot-your-password","text":"If you forget your password, go to the appropriate login page above (Demo or Production) and click the Forgot your password? link next to the Sign In button. The system will email you instructions on how to proceed.","title":"Forgot Your Password?"},{"location":"pharos/events/","text":"Premis Events APTrust records PREMIS events for intellectual objects and generic files. You can view a list of all events related to your instution's objects and files by clicking the Events tab in Pharos. Use the filters on the left side of the page to filter by event type and outcome, but note that although the sidebar lists all of the event types defined by the Library of Congress's PREMIS specification, APTrust only implements the event types listed below. Tip Clicking the Events tab may result in a long delay before the page loads. The system contains tens of millions of events, and we're working on improving the load time. Searching for Events Use the search bar at the top of the page to find specific events, or events related to specific objects or files. Choose Event Identifier to search for specific events by UUID. Chose Object Identifier to find events related to a specific object, or File Identifier to find file-specific events. Object-Level Events The APTrust repository records the following PREMIS events for intellectual objects: Ingestion - The ingest process for the object completed. This means the object record was created and all of the object's files were copied to preservation storage. Creation - The object record was created. Access Assignment - The object was assigned an access setting of Consortia , Institution , or Restricted . See access values for definitions. Identifier Assignment - The object was assigned an identifier. APTrust object identifiers use the pattern <institution.domain>/<object_name> , where object_name is the name of the tarred bag, minus the .tar extension. For example, test.edu/bag_of_photos . Deletion - The object was deleted. This means that all of its component files were deleted. Pharos keeps a record of the object and all of its files after deletion, though it does not retain the files themselves. File-Level Events APTrust records the following PREMIS events for the generic files that make up each intellectual object: Ingestion - The file has been copied to long-term preservation storage and its metadata has been saved in Pharos. Identifier Assignment - The file has been assigned an APTrust identifier, in the form <object_identifier>/<file_relative_path> , where file_relative_path is the location of the file in the bag in which it was submitted. For example, if test.edu submits a bag called bag_of_photos, the payload file data/photo1.jpg would have the identifier test.edu/bag_of_photos/data/photo1.jpg . Message Digest Calculation - The APTrust ingest process has calculated a message digest for the file. On ingest, there should be two of these events for each file, one with an md5 digest and one with a sha256 digest. Replication - The file has been copied to replication storage. This applies only to files using the Stadard storage option, in which the primary copy exists in S3 in Northern Virginia and the secondard (replicated) copy is in Glacier in Oregon. See storage options for more information. Fixity Check - This records the outcome of a fixity check on this file. APTrust perform fixity checks on items in Standard storage every 90 days, but does not perform fixity checks on items in Glacier-Only or Glacier Deep Archive storage. See storage options for more information. Also note that APTrust checks the sha256 fixity only, even though we also know the md5 fixity value. Deletion - Records when a file was deleted and at whose request.","title":"Premis Events"},{"location":"pharos/events/#premis-events","text":"APTrust records PREMIS events for intellectual objects and generic files. You can view a list of all events related to your instution's objects and files by clicking the Events tab in Pharos. Use the filters on the left side of the page to filter by event type and outcome, but note that although the sidebar lists all of the event types defined by the Library of Congress's PREMIS specification, APTrust only implements the event types listed below. Tip Clicking the Events tab may result in a long delay before the page loads. The system contains tens of millions of events, and we're working on improving the load time.","title":"Premis Events"},{"location":"pharos/events/#searching-for-events","text":"Use the search bar at the top of the page to find specific events, or events related to specific objects or files. Choose Event Identifier to search for specific events by UUID. Chose Object Identifier to find events related to a specific object, or File Identifier to find file-specific events.","title":"Searching for Events"},{"location":"pharos/events/#object-level-events","text":"The APTrust repository records the following PREMIS events for intellectual objects: Ingestion - The ingest process for the object completed. This means the object record was created and all of the object's files were copied to preservation storage. Creation - The object record was created. Access Assignment - The object was assigned an access setting of Consortia , Institution , or Restricted . See access values for definitions. Identifier Assignment - The object was assigned an identifier. APTrust object identifiers use the pattern <institution.domain>/<object_name> , where object_name is the name of the tarred bag, minus the .tar extension. For example, test.edu/bag_of_photos . Deletion - The object was deleted. This means that all of its component files were deleted. Pharos keeps a record of the object and all of its files after deletion, though it does not retain the files themselves.","title":"Object-Level Events"},{"location":"pharos/events/#file-level-events","text":"APTrust records the following PREMIS events for the generic files that make up each intellectual object: Ingestion - The file has been copied to long-term preservation storage and its metadata has been saved in Pharos. Identifier Assignment - The file has been assigned an APTrust identifier, in the form <object_identifier>/<file_relative_path> , where file_relative_path is the location of the file in the bag in which it was submitted. For example, if test.edu submits a bag called bag_of_photos, the payload file data/photo1.jpg would have the identifier test.edu/bag_of_photos/data/photo1.jpg . Message Digest Calculation - The APTrust ingest process has calculated a message digest for the file. On ingest, there should be two of these events for each file, one with an md5 digest and one with a sha256 digest. Replication - The file has been copied to replication storage. This applies only to files using the Stadard storage option, in which the primary copy exists in S3 in Northern Virginia and the secondard (replicated) copy is in Glacier in Oregon. See storage options for more information. Fixity Check - This records the outcome of a fixity check on this file. APTrust perform fixity checks on items in Standard storage every 90 days, but does not perform fixity checks on items in Glacier-Only or Glacier Deep Archive storage. See storage options for more information. Also note that APTrust checks the sha256 fixity only, even though we also know the md5 fixity value. Deletion - Records when a file was deleted and at whose request.","title":"File-Level Events"},{"location":"pharos/files/","text":"Generic Files Generic files are the individual files or bitstreams that make up intellectual objects. These may be photos, videos, text documents, XML metadata files exported from your internal repository, etc. When you send a bag to your receiving bucket, APTrust creates an intellectual object from the bag (or updates an existing object, if the bag name matches the name of an existing object), and APTrust stores all of the bag's payload files and tag files. Any file outside the bag's data directory, except for manifests and tag manifests, is considered a tag file. Listing Files You view a list of your institution's generic files by clicking on the Files tab in Pharos. Use the filters on the left side of the page to narrow down the list. You can also use the search bar at the top of the page to locate specific files by File Identifier . Note that you can search by partial file identifier, so if you're looking for a file called img_2107.jpg but can't remember what intellectual object it belongs to, you should still be able to find it using that fragment of the file name. File Details Click on the identifier of any file to view its detail page. From the detail page, you can view events related to the file, or if you have sufficient permissions, you can restore or delete the file.","title":"Generic Files"},{"location":"pharos/files/#generic-files","text":"Generic files are the individual files or bitstreams that make up intellectual objects. These may be photos, videos, text documents, XML metadata files exported from your internal repository, etc. When you send a bag to your receiving bucket, APTrust creates an intellectual object from the bag (or updates an existing object, if the bag name matches the name of an existing object), and APTrust stores all of the bag's payload files and tag files. Any file outside the bag's data directory, except for manifests and tag manifests, is considered a tag file.","title":"Generic Files"},{"location":"pharos/files/#listing-files","text":"You view a list of your institution's generic files by clicking on the Files tab in Pharos. Use the filters on the left side of the page to narrow down the list. You can also use the search bar at the top of the page to locate specific files by File Identifier . Note that you can search by partial file identifier, so if you're looking for a file called img_2107.jpg but can't remember what intellectual object it belongs to, you should still be able to find it using that fragment of the file name.","title":"Listing Files"},{"location":"pharos/files/#file-details","text":"Click on the identifier of any file to view its detail page. From the detail page, you can view events related to the file, or if you have sufficient permissions, you can restore or delete the file.","title":"File Details"},{"location":"pharos/objects/","text":"Intellectual Objects An intellectual object is a logical collection of files. Pharos typically creates one intellectual object for each tarred bag file you upload to your receiving bucket. The only exception to this rule is when your bags following the multi-bag naming convention. For example, the contents of bags test.edu/photos.bag01.of03.tar , test.edu/photos.bag02.of03.tar , and test.edu/photos.bag03.of03.tar would all be collected into a single intellectual object. Listing Objects To view a list of your institution's intellectual objects, click the Objects tab. You can also use the search bar to locate objects by identifier, name, title, bag group identifier, or alternate identifier. Alternate Identifiers Alternate identifiers come from the Internal-Sender-Identifier tag in the bag-info.txt file. This usually identifies an object using your internal identifier scheme. This field is optional and may be blank. Bag Group Identifiers The optional bag group identifier comes from the Bag-Group-Identifier field in the bag-info.txt file. This is used to logically group a number of distinct intellectual objects. For example, some organizations prefer to break large collections into a series of smaller bags, each of which becomes a distinct intellectual object upon ingest. A group of objects called test.edu/smith_photos_1946 , test.edu/smith_photos_1947 , and test.edu/smith_photos_1948 may be logically grouped with the Bag-Group-Identifier Smith Photos . You can then search Pharos for objects belonging to this group to find all files belonging to the Smith Photos collection. Viewing Object Details Click any object title in the list of objects to view its details. Note that the object detail page includes buttons to view all of the object's files and events, and if you have sufficient privileges, to restore or delete the object.","title":"Intellectual Objects"},{"location":"pharos/objects/#intellectual-objects","text":"An intellectual object is a logical collection of files. Pharos typically creates one intellectual object for each tarred bag file you upload to your receiving bucket. The only exception to this rule is when your bags following the multi-bag naming convention. For example, the contents of bags test.edu/photos.bag01.of03.tar , test.edu/photos.bag02.of03.tar , and test.edu/photos.bag03.of03.tar would all be collected into a single intellectual object.","title":"Intellectual Objects"},{"location":"pharos/objects/#listing-objects","text":"To view a list of your institution's intellectual objects, click the Objects tab. You can also use the search bar to locate objects by identifier, name, title, bag group identifier, or alternate identifier.","title":"Listing Objects"},{"location":"pharos/objects/#alternate-identifiers","text":"Alternate identifiers come from the Internal-Sender-Identifier tag in the bag-info.txt file. This usually identifies an object using your internal identifier scheme. This field is optional and may be blank.","title":"Alternate Identifiers"},{"location":"pharos/objects/#bag-group-identifiers","text":"The optional bag group identifier comes from the Bag-Group-Identifier field in the bag-info.txt file. This is used to logically group a number of distinct intellectual objects. For example, some organizations prefer to break large collections into a series of smaller bags, each of which becomes a distinct intellectual object upon ingest. A group of objects called test.edu/smith_photos_1946 , test.edu/smith_photos_1947 , and test.edu/smith_photos_1948 may be logically grouped with the Bag-Group-Identifier Smith Photos . You can then search Pharos for objects belonging to this group to find all files belonging to the Smith Photos collection.","title":"Bag Group Identifiers"},{"location":"pharos/objects/#viewing-object-details","text":"Click any object title in the list of objects to view its details. Note that the object detail page includes buttons to view all of the object's files and events, and if you have sufficient privileges, to restore or delete the object.","title":"Viewing Object Details"},{"location":"pharos/rest_api/","text":"Pharos REST API The Pharos REST API enables you to programmatically query information about intellectual objects, files, premis events, and work items. For safety purposes, the API is primarily read-only. It does not allow object or file deletion, though it does allow you to request object restoration. The most common uses of the API are: Querying for an inventory of intellectual objects Querying for an inventory of files Checking the status of pending work items, such as ingests and restorations Getting an API Key To use the API, you'll need to get an API token from Pharos. Follow these steps: Log in to Pharos. Click your name in the upper right corner, then select View Profile . On the profile page, click the Generate API Secret Key button. Separate Keys for Demo and Production Repositories The key you generate on https://demo.aptrust.org will only work on the demo server. The key you generate on https://repo.aptrust.org will only work on the production server. Using Your Key to Connect to the REST API To connect to the REST API, send your Pharos login email address and your API key in the following request headers: X-Pharos-API-User: user@example.com X-Pharos-API-KEY: topsecretapikey Using the service You'll find interactive Swagger documentation for the REST API at https://aptrust.github.io/pharos/ . If you don't have the means to develop your own API client, you can use the apt_check_ingest program in the APTrust Partner Tools to check the status of ingested items and items pending ingest.","title":"Pharos REST API"},{"location":"pharos/rest_api/#pharos-rest-api","text":"The Pharos REST API enables you to programmatically query information about intellectual objects, files, premis events, and work items. For safety purposes, the API is primarily read-only. It does not allow object or file deletion, though it does allow you to request object restoration. The most common uses of the API are: Querying for an inventory of intellectual objects Querying for an inventory of files Checking the status of pending work items, such as ingests and restorations","title":"Pharos REST API"},{"location":"pharos/rest_api/#getting-an-api-key","text":"To use the API, you'll need to get an API token from Pharos. Follow these steps: Log in to Pharos. Click your name in the upper right corner, then select View Profile . On the profile page, click the Generate API Secret Key button. Separate Keys for Demo and Production Repositories The key you generate on https://demo.aptrust.org will only work on the demo server. The key you generate on https://repo.aptrust.org will only work on the production server.","title":"Getting an API Key"},{"location":"pharos/rest_api/#using-your-key-to-connect-to-the-rest-api","text":"To connect to the REST API, send your Pharos login email address and your API key in the following request headers: X-Pharos-API-User: user@example.com X-Pharos-API-KEY: topsecretapikey","title":"Using Your Key to Connect to the REST API"},{"location":"pharos/rest_api/#using-the-service","text":"You'll find interactive Swagger documentation for the REST API at https://aptrust.github.io/pharos/ . If you don't have the means to develop your own API client, you can use the apt_check_ingest program in the APTrust Partner Tools to check the status of ingested items and items pending ingest.","title":"Using the service"},{"location":"pharos/two_factor_auth/","text":"Two-Factor Authentication Pharos supports two-factor authentication for users and institutions who want an extra layer of security. Two Factor Authentication is required for institutional administrators in both the production repository and the demo repository, since institutional admins have the ability to delete materials. It is not required for institutional users, however we recommend that all users enable it. Tip Two-factor settings are separate on the production and demo repositories. Enabling or disabling this feature in the Pharos production system has no effect on the demo system and vice-versa. You'll have to set your preferences separately on each system. Enabling Two-Factor Authentication Institutional users can enable two-factor authentication for themselves. Institutional administrators can require it for all users at their institution, thereby forcing them to enable it. Institutional users who enable two-factor auth for themselves can choose to disable it later. When an administrator enables two-factor auth for their institution, users cannot opt out or disable the setting. Enabling Two-Factor for Yourself To enable two-factor authentication for yourself, click the Enable 2FA button on the screen you see immediately after login and follow the onscreen instructions. Update Your Mobile Number If your phone number isn't up to date, you'll need to update it in the confirmation dialog. Enter the number of your mobile phone to receive two-factor authentication codes via text message or push notification. Copy Your Backup Codes Before proceeding any further, copy your backup codes to a safe place on your computer or phone. These codes are valid for one-time use, and can help you log in to Pharos when you're not able to authenticate via text message or push notification. Verify Your Mobile Number Click one of the two buttons to verify your mobile number. Choose Verify Phone Number via SMS to receive a text message. If you already have the Authy app installed, choose Verify Phone Number via Push Notification . You should receive a text message or push notification within a minute or so. If you chose the text/SMS option, enter the code you received in the text message into the verification field in Pharos. NEED SCREENSHOT If you have Authy installed on your phone and you chose to verify via push notification, click the Approve button when the Authy verification request appears. Enabling Two-Factor for Other Users or Your Entire Institution Institutional administrators can require two-factor authentication for specific users at their institution, or for the institution as a whole. To enable two-factor auth for a specific user: Choose Admin > Manage Users from the menu in the upper right corner of the page. Click the green Enable 2FA button to the right of the user for whom you want to enable two-factor auth. To require two-factor auth for your institution: Navigate to the home page by clicking the APTrust logo in the upper left hand corner. Click the green Enable Mandatory Institution-Wide 2FA button. Choosing Your Second Factor After enabling two-factor authentication, you'll be presented with an option to verify your identity each time you log in to Pharos. Choose the option that best suits your needs, and remember that if you don't have access to phone service, you can use each of your backup codes once. Grace Period for New Users New users have a grace period during which they will be prompted to enabled two-factor authentication. On the production repository, this grace period is 30 days long. On the demo repository, this grace period is 90 days long. The grace period begins when the user's account is created. It applies to all users for whom two-factor auth is required (institutional administrators and institutional users for whom two-factor auth has been required at their institution). If You're Locked Out If you can't log in and you don't have access to any valid backup codes, contact help@aptrust.org .","title":"Two-Factor Authentication"},{"location":"pharos/two_factor_auth/#two-factor-authentication","text":"Pharos supports two-factor authentication for users and institutions who want an extra layer of security. Two Factor Authentication is required for institutional administrators in both the production repository and the demo repository, since institutional admins have the ability to delete materials. It is not required for institutional users, however we recommend that all users enable it. Tip Two-factor settings are separate on the production and demo repositories. Enabling or disabling this feature in the Pharos production system has no effect on the demo system and vice-versa. You'll have to set your preferences separately on each system.","title":"Two-Factor Authentication"},{"location":"pharos/two_factor_auth/#enabling-two-factor-authentication","text":"Institutional users can enable two-factor authentication for themselves. Institutional administrators can require it for all users at their institution, thereby forcing them to enable it. Institutional users who enable two-factor auth for themselves can choose to disable it later. When an administrator enables two-factor auth for their institution, users cannot opt out or disable the setting.","title":"Enabling Two-Factor Authentication"},{"location":"pharos/two_factor_auth/#enabling-two-factor-for-yourself","text":"To enable two-factor authentication for yourself, click the Enable 2FA button on the screen you see immediately after login and follow the onscreen instructions.","title":"Enabling Two-Factor for Yourself"},{"location":"pharos/two_factor_auth/#update-your-mobile-number","text":"If your phone number isn't up to date, you'll need to update it in the confirmation dialog. Enter the number of your mobile phone to receive two-factor authentication codes via text message or push notification.","title":"Update Your Mobile Number"},{"location":"pharos/two_factor_auth/#copy-your-backup-codes","text":"Before proceeding any further, copy your backup codes to a safe place on your computer or phone. These codes are valid for one-time use, and can help you log in to Pharos when you're not able to authenticate via text message or push notification.","title":"Copy Your Backup Codes"},{"location":"pharos/two_factor_auth/#verify-your-mobile-number","text":"Click one of the two buttons to verify your mobile number. Choose Verify Phone Number via SMS to receive a text message. If you already have the Authy app installed, choose Verify Phone Number via Push Notification . You should receive a text message or push notification within a minute or so. If you chose the text/SMS option, enter the code you received in the text message into the verification field in Pharos. NEED SCREENSHOT If you have Authy installed on your phone and you chose to verify via push notification, click the Approve button when the Authy verification request appears.","title":"Verify Your Mobile Number"},{"location":"pharos/two_factor_auth/#enabling-two-factor-for-other-users-or-your-entire-institution","text":"Institutional administrators can require two-factor authentication for specific users at their institution, or for the institution as a whole. To enable two-factor auth for a specific user: Choose Admin > Manage Users from the menu in the upper right corner of the page. Click the green Enable 2FA button to the right of the user for whom you want to enable two-factor auth. To require two-factor auth for your institution: Navigate to the home page by clicking the APTrust logo in the upper left hand corner. Click the green Enable Mandatory Institution-Wide 2FA button.","title":"Enabling Two-Factor for Other Users or Your Entire Institution"},{"location":"pharos/two_factor_auth/#choosing-your-second-factor","text":"After enabling two-factor authentication, you'll be presented with an option to verify your identity each time you log in to Pharos. Choose the option that best suits your needs, and remember that if you don't have access to phone service, you can use each of your backup codes once.","title":"Choosing Your Second Factor"},{"location":"pharos/two_factor_auth/#grace-period-for-new-users","text":"New users have a grace period during which they will be prompted to enabled two-factor authentication. On the production repository, this grace period is 30 days long. On the demo repository, this grace period is 90 days long. The grace period begins when the user's account is created. It applies to all users for whom two-factor auth is required (institutional administrators and institutional users for whom two-factor auth has been required at their institution).","title":"Grace Period for New Users"},{"location":"pharos/two_factor_auth/#if-youre-locked-out","text":"If you can't log in and you don't have access to any valid backup codes, contact help@aptrust.org .","title":"If You're Locked Out"},{"location":"pharos/user_management/","text":"User Management Adding New Users Institutional administrators can add new users at their institition. To add a new user: Choose Admin > New User from the menu in the upper right corner of the page. Enter the new user's name, email address and mobile phone number. Select one of the following roles: Institutional Admin - This role has all the privilages of the institutional user, and can add, edit, and deactivate users at your organization. It can also access restricted objects and initiate and approve object and file deletions. Institutional User - This role can send materials to APTrust for ingest, and can view and restore files and objects that are not restricted. Deactivating Users Institutional admins can deactivate a user by following these steps: Choose Admin > Manage Users from the menu in the upper right corner of the page. Click the red Deactivate button to the right of the user's name. Note that you can also enable two-factor authentication for specific users on the Manage Users page.","title":"User Management"},{"location":"pharos/user_management/#user-management","text":"","title":"User Management"},{"location":"pharos/user_management/#adding-new-users","text":"Institutional administrators can add new users at their institition. To add a new user: Choose Admin > New User from the menu in the upper right corner of the page. Enter the new user's name, email address and mobile phone number. Select one of the following roles: Institutional Admin - This role has all the privilages of the institutional user, and can add, edit, and deactivate users at your organization. It can also access restricted objects and initiate and approve object and file deletions. Institutional User - This role can send materials to APTrust for ingest, and can view and restore files and objects that are not restricted.","title":"Adding New Users"},{"location":"pharos/user_management/#deactivating-users","text":"Institutional admins can deactivate a user by following these steps: Choose Admin > Manage Users from the menu in the upper right corner of the page. Click the red Deactivate button to the right of the user's name. Note that you can also enable two-factor authentication for specific users on the Manage Users page.","title":"Deactivating Users"},{"location":"pharos/work_items/","text":"Work Items Work items are tasks that APTrust systems perform in response to depositor requests. The Work Items list shows the status of your institution's recent requests. You can view the list by clicking the Work Items tab in Pharos. You can filter the list to specific actions, statuses, and stages by clicking any of the action/status/stage names in the left column. Actions Work Item actions include the following: Ingest - Getting new or updated objects into the system. Restore - Restoring individual files or whole intellectual objects to a depositor's restoration bucket. Glacier Restore - This is the first step in restoring objects and files from Glacier. Delete - Deleting files or objects from preservation storage. Stages Cleanup - The task has completed and the system has cleaned up temporary files. This applies only to ingest and restoration actions. This stage is more meaningful to APTrust internal operations than to depositors. Fetch - The system is retrieving a bag from the receiving bucket for ingest, or is retrieving files from preservation storage for restortation. Package - An intellectual object's files are being repackaged into a new bag for restoration. Receive - APTrust has noticed a new bag in a receiving bucket, but has not yet begun to process it for ingest. Record - The system has finished copying a bag's files to preservation storage and is now recording metadata in Pharos. Requested - A depositor has requested a restoration or deletion, but the system has not yet begun to process it. Resolve - A task has completed. See Statuses below for the outcome. Store - Files are being copied to long-term preservation. This applies only to ingest. Unpack - Obsolete. Validate - The system is validating a bag before ingest, or it's validating a bag it has just assembled for restoration. Statuses Cancelled - The task was cancelled by an APTrust administrator. You find an explanation of the cancellation by clicking on the item and reading the Note/Error field. Failed - The task failed. Virtually all failures result from one of the following causes: A depositor submitted an invalid bag for ingest. This is a permanent error and the system will not retry the task until the depositor submits a new version of the bag. The system has run into a temporary problem such as lack of disk space or poor network connection. The system will automatically retry the task. If the task fails repeatedly, an APTrust admin will try to solve the underlying problem and then tell the system to retry the task again. Pending - The system is waiting for available resources to start the next stage of the task. See Stages above. Started - The system has started the current Stage of the task and is still working on it. The Fetch, Validate, Store, Record, and Package stages can take several hours for very large bags. Success - The task completed successfully.","title":"Work Items"},{"location":"pharos/work_items/#work-items","text":"Work items are tasks that APTrust systems perform in response to depositor requests. The Work Items list shows the status of your institution's recent requests. You can view the list by clicking the Work Items tab in Pharos. You can filter the list to specific actions, statuses, and stages by clicking any of the action/status/stage names in the left column.","title":"Work Items"},{"location":"pharos/work_items/#actions","text":"Work Item actions include the following: Ingest - Getting new or updated objects into the system. Restore - Restoring individual files or whole intellectual objects to a depositor's restoration bucket. Glacier Restore - This is the first step in restoring objects and files from Glacier. Delete - Deleting files or objects from preservation storage.","title":"Actions"},{"location":"pharos/work_items/#stages","text":"Cleanup - The task has completed and the system has cleaned up temporary files. This applies only to ingest and restoration actions. This stage is more meaningful to APTrust internal operations than to depositors. Fetch - The system is retrieving a bag from the receiving bucket for ingest, or is retrieving files from preservation storage for restortation. Package - An intellectual object's files are being repackaged into a new bag for restoration. Receive - APTrust has noticed a new bag in a receiving bucket, but has not yet begun to process it for ingest. Record - The system has finished copying a bag's files to preservation storage and is now recording metadata in Pharos. Requested - A depositor has requested a restoration or deletion, but the system has not yet begun to process it. Resolve - A task has completed. See Statuses below for the outcome. Store - Files are being copied to long-term preservation. This applies only to ingest. Unpack - Obsolete. Validate - The system is validating a bag before ingest, or it's validating a bag it has just assembled for restoration.","title":"Stages"},{"location":"pharos/work_items/#statuses","text":"Cancelled - The task was cancelled by an APTrust administrator. You find an explanation of the cancellation by clicking on the item and reading the Note/Error field. Failed - The task failed. Virtually all failures result from one of the following causes: A depositor submitted an invalid bag for ingest. This is a permanent error and the system will not retry the task until the depositor submits a new version of the bag. The system has run into a temporary problem such as lack of disk space or poor network connection. The system will automatically retry the task. If the task fails repeatedly, an APTrust admin will try to solve the underlying problem and then tell the system to retry the task again. Pending - The system is waiting for available resources to start the next stage of the task. See Stages above. Started - The system has started the current Stage of the task and is still working on it. The Fetch, Validate, Store, Record, and Package stages can take several hours for very large bags. Success - The task completed successfully.","title":"Statuses"},{"location":"preservation/deletion/","text":"Deletion The Deletion Process Deleting objects from APTrust is a multi-step process. blockdiag { Admin makes deletion request -> APTrust sends email to admins for confirmation -> Admin confirms -> System queues deletion } An institutional administrator requests deletion of a file or entire object by clicking the delete button in Pharos (see below). Note that only institutional administrators can request deletions. APTrust generates an email to other administrators at the same institution asking them to confirm the deletion. (If your institution has only one admin, APTrust will send the confirmation email to that admin.) If one additional admin clicks the 'confirm deletion' link in the email, the files or objects will be deleted. Deleting an Intellectual Object The screenshot below shows the detail page for an intellectual object. Clicking the red Delete button on this page initiates the deletion process for the entire object. Deleting a Single File To delete a single file, go to the detail page of the file and click the red Delete button. You can find the file in one of two ways: Search for the file using the file identifier. Search for the object using the object identifier. If you searched by object identifier, you can click the View Preserved Files button on the object detail page to find the detail page of the file you want to delete. The screenshot below shows the detail page for a generic file. Clicking the red Delete button on this page initiates the deletion process for that file. Deletion Work Items After an institutional administrator confirms a deletion, the deletion request will appear in the list of work items, where you can track its progress. Deleting a single file results in one work item. Deleting an intellectual object results in one Work Item per file . Deleting an intellectual object comprised of 20 files will create 20 work items. The image below shows a list of completed work items. Note that deletions usually happen fairly quickly, within minutes of your institutional admin's confirmation of the deletion request email. Effect of Deletion on Metadata When you delete a file, Pharos creates a deletion PREMIS event for the file that includes the date and time of deletion and the email address of the user who requested the deletion. Pharos keeps the generic file records, changing it's state from 'Active' to 'Deleted.' Pharos also keeps all prior PREMIS events and fixity records related to the file, and the file record remains accessible through both the Web UI and the member API. In addition, Pharos keeps a Work Item record that shows when the deletion was requested and when it was completed. Work Items are also available through the Web UI and the member API. Bulk Deletion Contact help@aptrust.org if you want to delete a large number of objects. For bulk deletions, the depositor sends us a list of items to delete and APTrust initiates the process. Your institutional admins will still have to confirm the deletions before we execute them, but the process can save you having to click on the delete button on a large number of object or file detail pages.","title":"Deletion"},{"location":"preservation/deletion/#deletion","text":"","title":"Deletion"},{"location":"preservation/deletion/#the-deletion-process","text":"Deleting objects from APTrust is a multi-step process. blockdiag { Admin makes deletion request -> APTrust sends email to admins for confirmation -> Admin confirms -> System queues deletion } An institutional administrator requests deletion of a file or entire object by clicking the delete button in Pharos (see below). Note that only institutional administrators can request deletions. APTrust generates an email to other administrators at the same institution asking them to confirm the deletion. (If your institution has only one admin, APTrust will send the confirmation email to that admin.) If one additional admin clicks the 'confirm deletion' link in the email, the files or objects will be deleted.","title":"The Deletion Process"},{"location":"preservation/deletion/#deleting-an-intellectual-object","text":"The screenshot below shows the detail page for an intellectual object. Clicking the red Delete button on this page initiates the deletion process for the entire object.","title":"Deleting an Intellectual Object"},{"location":"preservation/deletion/#deleting-a-single-file","text":"To delete a single file, go to the detail page of the file and click the red Delete button. You can find the file in one of two ways: Search for the file using the file identifier. Search for the object using the object identifier. If you searched by object identifier, you can click the View Preserved Files button on the object detail page to find the detail page of the file you want to delete. The screenshot below shows the detail page for a generic file. Clicking the red Delete button on this page initiates the deletion process for that file.","title":"Deleting a Single File"},{"location":"preservation/deletion/#deletion-work-items","text":"After an institutional administrator confirms a deletion, the deletion request will appear in the list of work items, where you can track its progress. Deleting a single file results in one work item. Deleting an intellectual object results in one Work Item per file . Deleting an intellectual object comprised of 20 files will create 20 work items. The image below shows a list of completed work items. Note that deletions usually happen fairly quickly, within minutes of your institutional admin's confirmation of the deletion request email.","title":"Deletion Work Items"},{"location":"preservation/deletion/#effect-of-deletion-on-metadata","text":"When you delete a file, Pharos creates a deletion PREMIS event for the file that includes the date and time of deletion and the email address of the user who requested the deletion. Pharos keeps the generic file records, changing it's state from 'Active' to 'Deleted.' Pharos also keeps all prior PREMIS events and fixity records related to the file, and the file record remains accessible through both the Web UI and the member API. In addition, Pharos keeps a Work Item record that shows when the deletion was requested and when it was completed. Work Items are also available through the Web UI and the member API.","title":"Effect of Deletion on Metadata"},{"location":"preservation/deletion/#bulk-deletion","text":"Contact help@aptrust.org if you want to delete a large number of objects. For bulk deletions, the depositor sends us a list of items to delete and APTrust initiates the process. Your institutional admins will still have to confirm the deletions before we execute them, but the process can save you having to click on the delete button on a large number of object or file detail pages.","title":"Bulk Deletion"},{"location":"preservation/ingest/","text":"Ingest Notice Before sending materials to APTrust for ingest, you'll need to get AWS keys that allow you to upload materials to your receiving bucket. If you don't already have these, contact help@aptrust.org to get them. Also keep in mind that you'll have separate AWS keys for the demo and production environments. You'll also need to know how to produce a valid APTrust bag. If you don't know how to do that yet, see the bagging page for details, or use DART to get going quickly. Uploading for Ingest Assuming you have a valid bag, you can send it to our production system by uploading it to aptrust.receiving.test.<institution.domain> for the demo system or aptrust.receiving.<institution.domain> for the production system. In each case, replace <institution.domain> with your institution's domain name. The following tools can upload files to your receiving bucket: DART APTrust Partner Tools Minio Client Amazon's AWS Command Line Tools If you plan on interacting frequently with S3, the Minio Client provides the best combination of rich features, ease of installation, and ease of use. For most of what you'll be doing with APTrust, DART and the APTrust Partner Tools should be sufficient. The Ingest Process Warning There can be a delay of up to 15 minutes before the tarred bag shows up in the work item list. After you upload tarred bag to your receiving bucket, APTrust's ingest process will add it to a list of items waiting to be processed. You can check the status of your bag in the list of Pharos Work Items , using the REST API, or using the apt_check_ingest program from the partner tools . Once your bag is successfully ingested it is automatically deleted from your receiving bucket. If the ingest fails you can see details in Pharos. Notice Failed bags stay in your receiving bucket for 30 or 60 days (demo or production) for your review. After that period the bag is automatically deleted. DART's dashboard also shows the status of items recently ingested and pending ingest. Smaller bags (those under about 5GB) tend to ingest quickly. Larger bags can take longer, with multi-terabyte bags sometimes taking a few days. This is because the ingest process calculates checksums on every byte of data in the bag and then typically copies each of the bag's files to two distinct regions of the country. Ingest Restrictions Materials must be sent in tarred bags. Bag names, and the names of files within bags, may not include control characters (such as backspace, delete, etc.) Maximum bag size on our demo system is 5 GB Maximum bag size on our production system is 5 TB You can get around the 5TB bag size limit by using bag groups and the Bag-Group-Identifier tag. See the bagging page for more info. Reingesting Existing Bags You can re-upload a bag any time you like to your receiving bucket, but be sure to read the page on updates so you understand how APTrust processes bag updates.","title":"Ingest"},{"location":"preservation/ingest/#ingest","text":"Notice Before sending materials to APTrust for ingest, you'll need to get AWS keys that allow you to upload materials to your receiving bucket. If you don't already have these, contact help@aptrust.org to get them. Also keep in mind that you'll have separate AWS keys for the demo and production environments. You'll also need to know how to produce a valid APTrust bag. If you don't know how to do that yet, see the bagging page for details, or use DART to get going quickly.","title":"Ingest"},{"location":"preservation/ingest/#uploading-for-ingest","text":"Assuming you have a valid bag, you can send it to our production system by uploading it to aptrust.receiving.test.<institution.domain> for the demo system or aptrust.receiving.<institution.domain> for the production system. In each case, replace <institution.domain> with your institution's domain name. The following tools can upload files to your receiving bucket: DART APTrust Partner Tools Minio Client Amazon's AWS Command Line Tools If you plan on interacting frequently with S3, the Minio Client provides the best combination of rich features, ease of installation, and ease of use. For most of what you'll be doing with APTrust, DART and the APTrust Partner Tools should be sufficient.","title":"Uploading for Ingest"},{"location":"preservation/ingest/#the-ingest-process","text":"Warning There can be a delay of up to 15 minutes before the tarred bag shows up in the work item list. After you upload tarred bag to your receiving bucket, APTrust's ingest process will add it to a list of items waiting to be processed. You can check the status of your bag in the list of Pharos Work Items , using the REST API, or using the apt_check_ingest program from the partner tools . Once your bag is successfully ingested it is automatically deleted from your receiving bucket. If the ingest fails you can see details in Pharos. Notice Failed bags stay in your receiving bucket for 30 or 60 days (demo or production) for your review. After that period the bag is automatically deleted. DART's dashboard also shows the status of items recently ingested and pending ingest. Smaller bags (those under about 5GB) tend to ingest quickly. Larger bags can take longer, with multi-terabyte bags sometimes taking a few days. This is because the ingest process calculates checksums on every byte of data in the bag and then typically copies each of the bag's files to two distinct regions of the country.","title":"The Ingest Process"},{"location":"preservation/ingest/#ingest-restrictions","text":"Materials must be sent in tarred bags. Bag names, and the names of files within bags, may not include control characters (such as backspace, delete, etc.) Maximum bag size on our demo system is 5 GB Maximum bag size on our production system is 5 TB You can get around the 5TB bag size limit by using bag groups and the Bag-Group-Identifier tag. See the bagging page for more info.","title":"Ingest Restrictions"},{"location":"preservation/ingest/#reingesting-existing-bags","text":"You can re-upload a bag any time you like to your receiving bucket, but be sure to read the page on updates so you understand how APTrust processes bag updates.","title":"Reingesting Existing Bags"},{"location":"preservation/restoration/","text":"Restoration Restoring Intellectual Objects You can restore an intellectual object by navigating to the object detail page and clicking the Restore Object button. To reach the object detail page, you can either click on the name of the object in the object list: Or search by object identifier: After you click Restore Object , APTrust does the following: Creates a work item describing what is to be restored. Copies all of the object's files into a new bag, verifying each file's checksums in the process. Copies the latest version of the aptrust-info.txt and bag-info.txt files into the bag. Writes a JSON file into the bag containing all of the PREMIS events APTrust recorded for that bag and its contents. Adds md5 and sha256 manifests and tag manifests to the bag. Copies the bag to your restoration bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete. Notes on Restored Bags Because we rebuild bags for restoration, the bag you get back will not exactly match the bag you deposited, though we do guarantee that it contains all of the latest versions of all of the payload files. Restored bags tend to differ in the following ways from your originally submitted bags: Restored bags have both sha256 and md5 manifests, while the bag you originally deposited typically has only one or the other. Restored bags include md5 and sha256 tag manifests while bags submitted for ingest typically have neither. Restored bags include a PremisEvents.json file describing all PREMIS events related to the bag and its contents since it was ingested. Restored bags include the latest version of each preserved file in the payload (data) directory. These last two points are important. In some cases, you or someone at your institution may have deleted files from a bag, or uploaded newer versions of files in a bag after the bag was initially ingested. The PremisEvents.json file includes a list of all deletions and re-ingests. In cases where files have been deleted or updated, these event records can help you understand why the restored payload does not match the payload of the originally submitted bag. Restoring Individual Files To restore an individual file, navigate to the file's detail page in Pharos and click the Restore File button. You can find the file detail page in one of two ways: Search for the file using the file identifier. Search for the object using the object identifier. If you searched by object identifier, you can click the View Preserved Files button on the object detail page to find the detail page of the file you want to restore. The Restore File button appears at the bottom of the page. APTrust performs the following steps for file restoration: Creates a work item with the restoration request. Verifies the file's checksum. Copies the file to your receiving bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete. Restoration Timeline Restoring an item usually takes anywhere from 10 minutes to 24 hours, depending on the size of the object, where it is stored, and the number of work items the system has to process before it gets to yours. When restoring items from S3, the restoration process can usually begin immediately, since the files are immediately accessible. For items using Standard storage (as opposed to Glacier-Only), APTrust always restores from S3. Restoring from Glacier takes longer than restoring from S3. When restoring from Glacier-only storage, it takes 4-5 hours to move files to a place where APTrust can copy and validate them. When restoring from Glacier Deep Archive, it takes 12 hours to move files into a location where APTrust can copy and validate them. The size of the items being restored determines how long it will take to restore them. For example, a 1 MB file can often be restored in under a minute. A 1 TB bag may take 24 hours or more. Most of restoration time is taken up by copying the files and validating their md5 and sha256 checksums. You can calculate overall restoration time as: S3: A product of file size: A few minutes for a few megabytes, or several hours for objects and files over 100 GB. Glacier: 4-5 hours plus file size. Glacier Deep Archive: 12 hours plus file size. Monitoring Restoration Progress You can check the progress of your restoration requests in Pharos' Work Items list or the Pharos REST API. [Need link to REST API doc.] When a restoration is complete, the file or bag will be waiting in your restoration bucket and APTrust will send an email to your institutional admins. The email includes information about the location of the restored file so you can download it. Downloading Restored Items You can use the apt_download command from our Partner Tools to download restored bags. Restored items are automatically deleted from your restoration bucket after 14 days to avoid ongoing storage costs. (We do not delete the preservation copy, only the copy in your restoration bucket.)","title":"Restoration"},{"location":"preservation/restoration/#restoration","text":"","title":"Restoration"},{"location":"preservation/restoration/#restoring-intellectual-objects","text":"You can restore an intellectual object by navigating to the object detail page and clicking the Restore Object button. To reach the object detail page, you can either click on the name of the object in the object list: Or search by object identifier: After you click Restore Object , APTrust does the following: Creates a work item describing what is to be restored. Copies all of the object's files into a new bag, verifying each file's checksums in the process. Copies the latest version of the aptrust-info.txt and bag-info.txt files into the bag. Writes a JSON file into the bag containing all of the PREMIS events APTrust recorded for that bag and its contents. Adds md5 and sha256 manifests and tag manifests to the bag. Copies the bag to your restoration bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete.","title":"Restoring Intellectual Objects"},{"location":"preservation/restoration/#notes-on-restored-bags","text":"Because we rebuild bags for restoration, the bag you get back will not exactly match the bag you deposited, though we do guarantee that it contains all of the latest versions of all of the payload files. Restored bags tend to differ in the following ways from your originally submitted bags: Restored bags have both sha256 and md5 manifests, while the bag you originally deposited typically has only one or the other. Restored bags include md5 and sha256 tag manifests while bags submitted for ingest typically have neither. Restored bags include a PremisEvents.json file describing all PREMIS events related to the bag and its contents since it was ingested. Restored bags include the latest version of each preserved file in the payload (data) directory. These last two points are important. In some cases, you or someone at your institution may have deleted files from a bag, or uploaded newer versions of files in a bag after the bag was initially ingested. The PremisEvents.json file includes a list of all deletions and re-ingests. In cases where files have been deleted or updated, these event records can help you understand why the restored payload does not match the payload of the originally submitted bag.","title":"Notes on Restored Bags"},{"location":"preservation/restoration/#restoring-individual-files","text":"To restore an individual file, navigate to the file's detail page in Pharos and click the Restore File button. You can find the file detail page in one of two ways: Search for the file using the file identifier. Search for the object using the object identifier. If you searched by object identifier, you can click the View Preserved Files button on the object detail page to find the detail page of the file you want to restore. The Restore File button appears at the bottom of the page. APTrust performs the following steps for file restoration: Creates a work item with the restoration request. Verifies the file's checksum. Copies the file to your receiving bucket at aptrust.restore.<your.domain> in our production repo, or aptrust.restore.test.<your.domain> in our demo repo. Marks the work item as complete.","title":"Restoring Individual Files"},{"location":"preservation/restoration/#restoration-timeline","text":"Restoring an item usually takes anywhere from 10 minutes to 24 hours, depending on the size of the object, where it is stored, and the number of work items the system has to process before it gets to yours. When restoring items from S3, the restoration process can usually begin immediately, since the files are immediately accessible. For items using Standard storage (as opposed to Glacier-Only), APTrust always restores from S3. Restoring from Glacier takes longer than restoring from S3. When restoring from Glacier-only storage, it takes 4-5 hours to move files to a place where APTrust can copy and validate them. When restoring from Glacier Deep Archive, it takes 12 hours to move files into a location where APTrust can copy and validate them. The size of the items being restored determines how long it will take to restore them. For example, a 1 MB file can often be restored in under a minute. A 1 TB bag may take 24 hours or more. Most of restoration time is taken up by copying the files and validating their md5 and sha256 checksums. You can calculate overall restoration time as: S3: A product of file size: A few minutes for a few megabytes, or several hours for objects and files over 100 GB. Glacier: 4-5 hours plus file size. Glacier Deep Archive: 12 hours plus file size.","title":"Restoration Timeline"},{"location":"preservation/restoration/#monitoring-restoration-progress","text":"You can check the progress of your restoration requests in Pharos' Work Items list or the Pharos REST API. [Need link to REST API doc.] When a restoration is complete, the file or bag will be waiting in your restoration bucket and APTrust will send an email to your institutional admins. The email includes information about the location of the restored file so you can download it. Downloading Restored Items You can use the apt_download command from our Partner Tools to download restored bags. Restored items are automatically deleted from your restoration bucket after 14 days to avoid ongoing storage costs. (We do not delete the preservation copy, only the copy in your restoration bucket.)","title":"Monitoring Restoration Progress"},{"location":"preservation/updates/","text":"Updates APTrust does not version bags. If you want to keep multiple versions of a bag, use a naming convention. For example: virginia.edu.bag_of_photos , virginia.edu.bag_of_photos_V2 , virginia.edu.bag_of_photos_V3 . When you upload a bag that has the same name as an existing bag, this is what happens: If a file in the new bag has the same name as a file in the old bag and the size or the md5 checksum or the sha256 checksum has changed, we overwrite the old file with the new one. You cannot recover the old file. If a file in the new bag has the same name as a file in the old bag and the size and checksums have not changed, we do nothing. If a file in the new bag did not exist in the old bag, we save it, but if a file in the old bag is not present in the new bag, we do not delete it. The table below shows what happens when you upload a new version of a previously ingested bag. Old Bag New Bag What we preserve Why bag-info.txt bag-info.txt (changed) the new version Contents in new version have changed data/document.pdf data/document.pdf (unchanged) old version The document did not change (file not present) data/new_image.jpg new version File did not exist in old bag, but it's here now data/old_image.jpg (file not present) old version Although this file has been deleted from the new bag, we will not assume you want to delete it from storage. File deletion must be a deliberate act of the depositor. This update policy has three important implications: If you want to delete files from an ingested bag / intellectual object, you must do that deliberately. Currently, you can delete only through our Web UI. When you restore the bag described in the table above, you'll get back both old_image.jpg and new_image.jpg (unless you manually delete one of them before you restore). You can update metadata in a bag by uploading only the metadata, as long as there's at least one file in the data directory and the bag is otherwise valid. This may be useful for bags that contain 100GB of data and 100KB of frequently-updated metadata. In Pharos, updating (overwriting) an existing file in a bag causes the following to happen: A new PREMIS ingestion event appears with the date of the new ingest. Two new PREMIS fixity generation events appear, one with the md5 checksum of the new file, and one with the sha256 checksum. The Pharos file page for the updated file will show the new checksums for the file at the bottom of the page, along with the date on which the new checksums were calculated. Below those will be the older checksums, and the dates they were calculated. Future fixity checks on the updated files will test against the latest fixity value of the updated files.","title":"Updates"},{"location":"preservation/updates/#updates","text":"APTrust does not version bags. If you want to keep multiple versions of a bag, use a naming convention. For example: virginia.edu.bag_of_photos , virginia.edu.bag_of_photos_V2 , virginia.edu.bag_of_photos_V3 . When you upload a bag that has the same name as an existing bag, this is what happens: If a file in the new bag has the same name as a file in the old bag and the size or the md5 checksum or the sha256 checksum has changed, we overwrite the old file with the new one. You cannot recover the old file. If a file in the new bag has the same name as a file in the old bag and the size and checksums have not changed, we do nothing. If a file in the new bag did not exist in the old bag, we save it, but if a file in the old bag is not present in the new bag, we do not delete it. The table below shows what happens when you upload a new version of a previously ingested bag. Old Bag New Bag What we preserve Why bag-info.txt bag-info.txt (changed) the new version Contents in new version have changed data/document.pdf data/document.pdf (unchanged) old version The document did not change (file not present) data/new_image.jpg new version File did not exist in old bag, but it's here now data/old_image.jpg (file not present) old version Although this file has been deleted from the new bag, we will not assume you want to delete it from storage. File deletion must be a deliberate act of the depositor. This update policy has three important implications: If you want to delete files from an ingested bag / intellectual object, you must do that deliberately. Currently, you can delete only through our Web UI. When you restore the bag described in the table above, you'll get back both old_image.jpg and new_image.jpg (unless you manually delete one of them before you restore). You can update metadata in a bag by uploading only the metadata, as long as there's at least one file in the data directory and the bag is otherwise valid. This may be useful for bags that contain 100GB of data and 100KB of frequently-updated metadata. In Pharos, updating (overwriting) an existing file in a bag causes the following to happen: A new PREMIS ingestion event appears with the date of the new ingest. Two new PREMIS fixity generation events appear, one with the md5 checksum of the new file, and one with the sha256 checksum. The Pharos file page for the updated file will show the new checksums for the file at the bottom of the page, along with the date on which the new checksums were calculated. Below those will be the older checksums, and the dates they were calculated. Future fixity checks on the updated files will test against the latest fixity value of the updated files.","title":"Updates"}]}